#!/bin/bash

RED='\033[0;31m'
BLUE='\033[0;34m'
WHITE='\033[0;39m'
NC='\033[0m'
colours=false
pattern="[a-h][1-8] [a-h][1-8]"
turn=1
num_rows=9
move_valid=false
game_over=false
plPiece=false
other_player=false
file=""
declare -A table

# Creates chessboard
CreateTable () {        
  for ((i=2;i<=9;i++)) do
      table[$i,1]=$(($i-1));
  done 

  table[1,1]=' '; 
  table[1,2]='a';
  table[1,3]='b';
  table[1,4]='c';
  table[1,5]='d';
  table[1,6]='e';
  table[1,7]='f';
  table[1,8]='g';
  table[1,9]='h';  
  table[2,2]='R';
  table[2,3]='N';
  table[2,4]='B';
  table[2,5]='Q';
  table[2,6]='K';
  table[2,7]='B';
  table[2,8]='N';
  table[2,9]='R';
  
  for ((i=2;i<=num_rows;i++)) do
      table[3,$i]='P';
  done

  for ((i=4;i<=7;i++)) do
      for ((j=2;j<=num_rows;j++)) do
         table[$i,$j]='.';
      done
  done
 
  for ((i=2;i<=num_rows;i++)) do
      table[8,$i]='p';
  done

  table[9,2]='r';
  table[9,3]='n';
  table[9,4]='b';
  table[9,5]='q';
  table[9,6]='k';
  table[9,7]='b';
  table[9,8]='n';
  table[9,9]='r';
}

# Draw chessboard 
DrawTable() {
if [[ $colours = true ]] ; then
    for ((i=9;i>=2;i--)) do
        printf '\n'
        for ((j=1;j<=9;j++)) do
           if [[ ${table[$i,$j]} =~ [a-z] ]] ; then
              printf "${RED}${table[$i,$j]}${NC} "
           elif [[ ${table[$i,$j]} =~ [A-Z] ]] ; then
             printf "${BLUE}${table[$i,$j]}${NC} "
           else
            printf "${WHITE}${table[$i,$j]}${NC} "
           fi
        done
    done
    printf '\n'
    for ((j=1;j<=9;j++)) do
       printf "${table[1,$j]} "
    done
    printf '\n'
    printf '\n'
  else
   for ((i=9;i>=1;i--)) do
      printf '\n'
      for ((j=1;j<=9;j++)) do
          printf "${table[$i,$j]} "
      done
   done
   printf '\n'
   printf '\n'
  fi


}

# Answer if player has a piece on exact spot - writes it into plPiece variable
# Arg spot and player
IsTherePlPiece() {
 spot=$1
 o2=$(echo ${spot:0:1} | tr [1-8] [2-9])
 o1=$(echo ${spot:1:1} | tr [1-8] [2-9])
#pl1
 if [ "$2" = 1 ] ; then
    if [[ ${table[$o1,$o2]} =~ [A-Z] ]] ; then
       return 0
    else
       return 1
    fi
#pl2
 else
   if [[ ${table[$o1,$o2]} =~ [a-z] ]] ; then 
       return 0
    else
       return 1
    fi
 fi
}

# Argumets move and player
# Move ahead
CheckPawnMove() {
# get single char from move for easier work
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
  if [[ $2 = 1 ]] ; then
# 2 steps from first postion
     if [ $old1 = 2 ] && [ $new1 = 4 ] && [ $old2 = $new2 ] ; then
        if  ! IsTherePlPiece $new2$new1 1 && ! IsTherePlPiece $new2$new1 2; then 
              return 0
        fi
     fi  
# 1 step ahead
     if  [ $new1 = $(expr $old1 + 1) ] && [ $old2 = $new2 ] ; then      
        if  ! IsTherePlPiece $new2$new1 1 && ! IsTherePlPiece $new2$new1 2; then 
              return 0
        fi 
     fi
  else 
# Player 2
# 2 steps from first position
     if [ $old1 = 7 ] && [ $new1 = 5 ] && [ $old2 = $new2 ] ; then
        if  ! IsTherePlPiece $new2$new1 1 && ! IsTherePlPiece $new2$new1 2; then 
              return 0
        fi
     fi
# 1 step ahead
     if  [ $new1 = $(expr $old1 - 1) ] && [ $old2 = $new2 ] ; then
        if ! IsTherePlPiece $new2$new1 1 && ! IsTherePlPiece $new2$new1 2; then 
              return 0
        fi
     fi
  fi
# move not found
  return 1
}
 
# Argumets move and player
# Capture enemy sideways
CheckPawnMove2() {
# get single char from move for easier work
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
  if [ $2 = 1 ] ; then
    if  [ $new1 = $(expr $old1 + 1) ] && [ $new2 = $(expr $old2 + 1) ] ; then
         if IsTherePlPiece $new2$new1 2; then
           return 0
         fi
     fi 
     if  [ $new1 = $(expr $old1 + 1) ] && [ $new2 = $(expr $old2 - 1) ] ; then
         if IsTherePlPiece $new2$new1 2; then
           return 0
         fi
     fi
# Player 2
  else
    if  [ $new1 = $(expr $old1 - 1) ] && [ $new2 = $(expr $old2 + 1) ] ; then
         if IsTherePlPiece $new2$new1 1; then
           return 0
         fi
     fi
     if  [ $new1 = $(expr $old1 - 1) ] && [ $new2 = $(expr $old2 - 1) ] ; then
         if IsTherePlPiece $new2$new1 1; then
           return 0
         fi
     fi
  fi
#move not found
  return 1
}

# Argumets move and player 
CheckRookMove() {
# get single char from move for easier work
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
   if [ $2 = 1 ] ; then
# Move in row
   if [ $old1 = $new1 ] ; then
# Move right
      if [ $old2 -lt $new2 ] ; then
           col_diff=$(expr $new2 - $old2)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $(expr $old2 + $i)$new1 1; then
                   return 1 
                fi
                if IsTherePlPiece $(expr $old2 + $i)$new1 2; then
                   return 1
                fi
           done    
           if IsTherePlPiece $new2$new1 1; then 
              return 1
           fi
           return 0
      fi     
# Move left         
      if [ $old2 -gt $new2 ] ; then
           col_diff=$(expr $old2 - $new2)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $(expr $old2 - $i)$new1 1; then
                   return 1 
                fi
                if IsTherePlPiece $(expr $old2 - $i)$new1 2; then
                   return 1
                fi
           done    
           if IsTherePlPiece $new2$new1 1; then 
              return 1
           fi
           return 0
      fi     
   fi
# Move in column
      if [ $old2 = $new2 ] ; then
# Move Up
      if [ $old1 -lt $new1 ] ; then
           col_diff=$(expr $new1 - $old1)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $old2$(expr $old1 + $i) 1; then
                   return 1
                fi     
                if IsTherePlPiece $old2$(expr $old1 + $i) 2; then
                   return 1
                fi
           done
           if IsTherePlPiece $new2$new1 1; then 
              return 1
           fi
           return 0
      fi
# Move Down         
      if [ $old1 -gt $new1 ] ; then
           col_diff=$(expr $old1 - $new1)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $old2$(expr $old1 - $i) 1; then
                   return 1
                fi 
                if IsTherePlPiece $old2$(expr $old1 - $i) 2; then
                   return 1
                fi
           done
           if IsTherePlPiece $new2$new1 1; then
              return 1
           fi
           return 0
      fi
   fi
# Player 2
   else
# Move in row
   if [ $old1 = $new1 ] ; then
# Move right
      if [ $old2 -lt $new2 ] ; then
           col_diff=$(expr $new2 - $old2)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $(expr $old2 + $i)$new1 1; then
                   return 1
                fi
                if IsTherePlPiece $(expr $old2 + $i)$new1 2; then
                   return 1
                fi
           done    
           if IsTherePlPiece $new2$new1 1; then
              return 1
           fi
           return 0
      fi     
# Move left         
      if [ $old2 -gt $new2 ] ; then
           col_diff=$(expr $old2 - $new2)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $(expr $old2 - $i)$new1 1; then
                   return 1
                fi
                if IsTherePlPiece $(expr $old2 - $i)$new1 2; then
                   return 1
                fi
           done
           if IsTherePlPiece $new2$new1 1; then
              return 1
           fi
           return 0
      fi     
   fi
# Move in column
      if [ $old2 = $new2 ] ; then
# Move Up
      if [ $old1 -lt $new1 ] ; then
           col_diff=$(expr $new1 - $old1)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $old2$(expr $old1 + $i) 1; then
                   return 1
                fi     
                if IsTherePlPiece $old2$(expr $old1 + $i) 2; then
                   return 1
                fi
           done
           if IsTherePlPiece $new2$new1 1; then
              return 1
           fi
           return 0
      fi
# Move Down         
      if [ $old1 -gt $new1 ] ; then
           col_diff=$(expr $old1 - $new1)
           for ((i=1;i<col_diff;i++)) do
                if IsTherePlPiece $old2$(expr $old1 - $i) 1; then
                   return 1
                fi 
                if IsTherePlPiece $old2$(expr $old1 - $i) 2; then
                   return 1
                fi
           done
           if IsTherePlPiece $new2$new1 1; then
              return 1
           fi
           return 0
      fi
   fi
fi
return 1
}

# Argumets move and player
CheckKnightMove() {
# get single char from move for easier work 
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
  if [ $2 = 1 ] ; then
# New spot occupied by pl1 piece
       if IsTherePlPiece $new2$new1 1; then
         return 1
       fi
# Move Up 2
  if [ $(expr $new2 - $old2) = 2 ] && [ $(expr $new1 - $old1) = 1 ] ; then
       return 0
  fi
  if [ $(expr $new2 - $old2) = 2 ] && [ $(expr $old1 - $new1) = 1 ] ; then
       return 0
  fi
# Move down 2
  if [ $(expr $old2 - $new2) = 2 ] && [ $(expr $new1 - $old1) = 1 ] ; then
       return 0 
  fi
  if [ $(expr $old2 - $new2) = 2 ] && [ $(expr $old1 - $new1) = 1 ] ; then
       return 0
  fi
# Move right 2
  if [ $(expr $new1 - $old1) = 2 ] && [ $(expr $new2 - $old2) = 1 ] ; then
       return 0
  fi
  if [ $(expr $new1 - $old1) = 2 ] && [ $(expr $old2 - $new2) = 1 ] ; then
       return 0
  fi
# Move left 2
  if [ $(expr $old1 - $new1) = 2 ] && [ $(expr $new2 - $old2) = 1 ] ; then 
       return 0
  fi
  if [ $(expr $old1 - $new1) = 2 ] && [ $(expr $old2 - $new2) = 1 ] ; then
       return 0
  fi
# Player 2
  else
# New spot occupied by pl2 piece
       if IsTherePlPiece $new2$new1 2; then
          return 1
       fi
# Move Up 2
  if [ $(expr $new2 - $old2) = 2 ] && [ $(expr $new1 - $old1) = 1 ] ; then
       return 0
  fi
  if [ $(expr $new2 - $old2) = 2 ] && [ $(expr $old1 - $new1) = 1 ] ; then
       return 0
  fi
# Move down 2
  if [ $(expr $old2 - $new2) = 2 ] && [ $(expr $new1 - $old1) = 1 ] ; then
       return 0
  fi
  if [ $(expr $old2 - $new2) = 2 ] && [ $(expr $old1 - $new1) = 1 ] ; then
       return 0
  fi
# Move right 2
  if [ $(expr $new1 - $old1) = 2 ] && [ $(expr $new2 - $old2) = 1 ] ; then
       return 0
  fi
  if [ $(expr $new1 - $old1) = 2 ] && [ $(expr $old2 - $new2) = 1 ] ; then
       return 0
  fi
# Move left 2
  if [ $(expr $old1 - $new1) = 2 ] && [ $(expr $new2 - $old2) = 1 ] ; then
       return 0
  fi
  if [ $(expr $old1 - $new1) = 2 ] && [ $(expr $old2 - $new2) = 1 ] ; then
       return 0
  fi
  fi
return 1
}

# arguments move and player
CheckBishopMove() {
# get single char from move for easier work
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
  if [ $2 = 1 ] ; then
     if IsTherePlPiece $new2$new1 1; then
        return 1
     fi
     if [ $new1 -gt $old1 ] ; then
        row_diff=$(expr $new1 - $old1)
# UpperRight
        if [ $new2 -gt $old2 ] ; then
           col_diff=$(expr $new2 - $old2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 + $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 + $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi    
        fi
# UpperLeft
        if [ $new2 -lt $old2 ] ; then
           col_diff=$(expr $old2 - $new2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 + $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 + $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi
        fi
     fi
# LowerRight     
     if [ $old1 -gt $new1 ] ; then
        row_diff=$(expr $old1 - $new1)
        if [ $new2 -gt $old2 ] ; then
           col_diff=$(expr $new2 - $old2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 - $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 - $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi    
        fi
# LowerLeft
        if [ $new2 -lt $old2 ] ; then
           col_diff=$(expr $old2 - $new2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 - $i) 1; then
                     return 1
                  fi
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 - $i) 2; then
                     return 0
                  fi
               done
               return 0
           fi
        fi
     fi 
# Player 2 
  else
     if IsTherePlPiece $new2new1 2; then
        return 1
     fi
     if [ $new1 -gt $old1 ] ; then
        row_diff=$(expr $new1 - $old1)
# UpperRight
        if [ $new2 -gt $old2 ] ; then
           col_diff=$(expr $new2 - $old2)
           if [[ $col_diff = $row_diff ]] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 + $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 + $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi    
        fi
# UpperLeft
        if [ $new2 -lt $old2 ] ; then
           col_diff=$(expr $old2 - $new2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 + $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 + $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi
        fi
     fi
# LowerRight     
     if [ $old1 -gt $new1 ] ; then
        row_diff=$(expr $old1 - $new1)
        if [ $new2 -gt $old2 ] ; then
           col_diff=$(expr $new2 - $old2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 - $i) 1; then
                     return 1
                  fi   
                  if IsTherePlPiece $(expr $old2 + $i)$(expr $old1 - $i) 2; then
                     return 1
                  fi 
               done
               return 0
           fi    
        fi
# LowerLeft
        if [ $new2 -lt $old2 ] ; then
           col_diff=$(expr $old2 - $new2)
           if [ $col_diff = $row_diff ] ; then
               for((i=1;i<col_diff;i++)) do
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 - $i) 1; then
                     return 1
                  fi
                  if IsTherePlPiece $(expr $old2 - $i)$(expr $old1 - $i) 2; then
                     return 0
                  fi
               done
               return 0
           fi
        fi
     fi
  fi
# move not found
  return 1 
}

# arguments move and player
# queen can move either as rook or as bishop
CheckQueenMove() {
  CheckRookMove "$1" $2
  CheckBishopMove "$1" $2
}

# arguments move and player
CheckKingMove() {
  move=$1
  old2=$(echo ${move:0:1} | tr [a-h] [1-8])
  old1=${move:1:1}
  new2=$(echo ${move:3:1} | tr [a-h] [1-8])
  new1=${move:4:1}
# Player 1
  if [ $2 = 1 ] ;  then
     if IsTherePlPiece $new2$new1 1; then 
        return 1
     fi
# up left
  if [ $(expr $old1 - $new1) = 1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
       return 0
  fi
# up 
  if [ $old1 = $new1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
        return 0
  fi
# up right
  if [ $(expr $new1 - $old1) = 1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
        return 0
  fi
# right
  if [ $(expr $new1 - $old1) = 1 ] && [  $new2 = $old2 ] ; then
        return 0
  fi
# down right
  if [ $(expr $new1 - $old1) = 1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# down
  if [  $old1 = $new1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# down left
  if [ $(expr $old1 - $new1) = 1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# left   
  if [ $(expr $old1 - $new1) = 1 ] && [  $new2 = $old2 ] ; then
        return 0
  fi
# Player 2
  elif [[ $2 = 2 ]] ; then
     if IsTherePlPiece $new2$new1 2; then 
         return 1
     fi

# up left
  if [ $(expr $old1 - $new1) = 1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
        return 0
  fi
# up 
  if [ $old1 = $new1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
        return 0
  fi
# up right
  if [ $(expr $new1 - $old1) = 1 ] && [ $(expr $new2 - $old2) = 1 ] ; then
        return 0
  fi
# right
  if [ $(expr $new1 - $old1) = 1 ] && [  $new2 = $old2 ] ; then
        return 0
  fi
# down right
  if [ $(expr $new1 - $old1) = 1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# down
  if [  $old1 = $new1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# down left
  if [ $(expr $old1 - $new1) = 1 ] && [ $(expr $old2 - $new2) = 1 ] ; then
        return 0
  fi
# left   
  if [ $(expr $old1 - $new1) = 1 ] && [  $new2 = $old2 ] ; then
        return 0
  fi
  fi 
}

# argumets are move and player  
# finds a piece and player which is making a move
CheckMove() {
# get single char from move for easier work
# plPiece=false
  move="$1"
  i=$(echo ${move:0:1} | tr [a-h] [2-9])
  j=$(echo ${move:1:1} | tr [1-8] [2-9])
# pawn
  if [[ ${table[$j,$i]} = [Pp] ]] ; then 
     if CheckPawnMove "$1" $2 || CheckPawnMove2 "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
#rook
  if [[ ${table[$j,$i]} = [Rr] ]] ; then
     if CheckRookMove "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
#knight 
  if [[ ${table[$j,$i]} = [Nn] ]] ; then
     if CheckKnightMove "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
#bischop
  if [[ ${table[$j,$i]} =~ [Bb] ]] ; then
     if CheckBishopMove "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
#queen
  if [[ ${table[$j,$i]} =~ [Qq] ]] ; then
     if CheckQueenMove "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
#king
  if [[ ${table[$j,$i]} =~ [Kk] ]] ; then
     if CheckKingMove "$1" $2; then
       return 0
     else 
       return 1
     fi
  fi
} 

# makes a move and checks if king was taken - game over
# argument is move
MakeMove() {
  move=$1  
  old2=$(echo ${move:0:1} | tr [a-h] [2-9])
  old1=$(echo ${move:1:1} | tr [1-8] [2-9])
  new2=$(echo ${move:3:1} | tr [a-h] [2-9])
  new1=$(echo ${move:4:1} | tr [1-8] [2-9])
# other player move
  if [[ $turn = 1 ]] && [[ ${table[$old1,$old2]} =~ [a-z] ]] ; then
     return 1
  fi
  if [[ $turn = 2 ]] && [[ ${table[$old1,$old2]} =~ [A-Z] ]] ; then
     return 1
  fi
  if [[ ${table[$new1,$new2]} = K ]] ; then
  printf "\n Player 2 WINS"
  game_over=true
  fi
  if [[ ${table[$new1,$new2]} = k ]] ; then
  printf "\n Player 1 WINS"
  game_over=true
  fi
  table[$new1,$new2]=${table[$old1,$old2]}
  table[$old1,$old2]='.'
  DrawTable
}

# player 1 turn
Pl1Turn() {
   move_valid=false
# until player makes valid move he plays
   while [ $move_valid = false ] ; do
      printf "Player1 move:"
      read move 
      if [[ $move =~ $pattern ]] ; then
        if CheckMove "$move" 1; then
           if ! MakeMove "$move" 1; then
               printf "Invalid move \n" 
           else
              move_valid=true 
              if [[ $file != "" ]] ; then
                 echo "$move" >> "$file"
              fi
           fi
        else
          printf "Invalid move \n"
        fi
      else 
        printf "Invalid move format \n"
      fi
   done 
}

# player 2 turn
Pl2Turn() {
   move_valid=false
# until player makes valid move he plays
   while [ $move_valid = false ] ; do
      printf "Player2 move:"
      read move 
      if [[ $move =~ $pattern ]] ; then
        if CheckMove "$move" 2; then
           if ! MakeMove "$move" 2; then
               printf "Invalid move \n" 
           else
              move_valid=true 
              if [[ $file != "" ]] ; then
                 echo "$move" >> "$file"
              fi
           fi
        else
          printf "Invalid move \n"
        fi
      else 
        printf "Invalid move format \n"
      fi
   done 
}
 
Pregame() {
  printf "Do you want to save a replay? [y/n] \n"
  read answer
  while [[ ! $answer =~ [yYnN] ]] ; do 
     printf "Answer y fo yes n no \n"
     read answer
  done
  if [[ $answer =~ [Yy] ]]; then 
     printf "Choose a file name\n"
     read file
     while [ -e $file ]; do 
        printf "File already exists, choose a different name\n"
        read file 
     done
  fi
}
Game() {
  turn=1
  while [[ $game_over = false ]] ; do
    if [[ $turn = 1 ]] ; then
       Pl1Turn
       turn=2  
    else
       Pl2Turn 
       turn=1
    fi 
  done
  printf "Press ENTER to exit"
  read x
}

GameReplay() {
  if [ -e "$1" ]; then
     CreateTable
     DrawTable 
     turn=1
     cat "$1" | while read -r move ; do
       sleep 2
       MakeMove "$move" $turn
       if [[ $turn = 1 ]] ; then 
          turn=2
       else 
          turn=1 
       fi
     done 
  printf "Press ENTER to exit"
  read  x
  else
    printf "File doesn't exist \n"
  fi 
}
if [[ $1 = "--replay-game" ]] ; then
  if [[ $3 = "--colours" ]] ; then
     colours=true
  fi
  GameReplay $2
else 
  if [[ $1 = "--colours" ]] ; then
     colours=true
  fi
  Pregame
  CreateTable
  DrawTable
  Game
fi
